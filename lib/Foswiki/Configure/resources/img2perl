#!/usr/bin/perl
# See bottom of file for license and copyright information

# Generates module used by configure to validate paths.
#
# usage:
#  resources/img2perl rsources/foo.png >ImageTest.pm

use warnings;
use strict;

use MIME::Base64;

my $type;

my ( $file, $data );

while (<>) {
    $data .= $_;
    if ( eof() ) {
        $file = $ARGV;
        ($type) = $file =~ /\.(\w+)$/ if ($file);
        $type ||= 'png';
        $type = "image/$type";
    }
}
exit(1) unless ($file);

print << "IMAGE_MODULE";
#!/usr/bin/perl -T

# See bottom of file for license and copyright information

package Foswiki::Configure::ImageTest;

use warnings;
use strict;

use CGI ();
use CGI::Session;
use File::Temp;
use MIME::Base64;

use Foswiki::Configure qw/:session/;

\#<<<
IMAGE_MODULE

print "
# This module was machine-generated by $0 from $file "
  . scalar( localtime(time) ) . "
# The base64 content is binary data.
#
# Do not edit this file; edit the generator program instead.
#
# Every request that goes thru Foswiki::Engine ends up in Foswik::UI::handleRequest.
# If a request's query includes 'configurationTest', this module is called to respond.
#
# This mechanism allows configure to test the path thru the webserver to the request
# dispatcher.  We respond with a small image.  If the image appears, the path is clear,
# and any issues can be addressed without worrying about basic server configuration.

" . '
my @headers = ( "Cache-Control" => "no-cache", -expires => "-1d" );

sub text {
    my( $req, $res, $code, $ctext ) = splice( @_, 0 , 4 );

    my $text = join( "", @_ );

    if( $code == 200 ) {
        $res->header( -type => "text/plain", -status => "$code", @headers );
        $res->print($text);
        return $res;
    }
    $res->header( -type => "text/html", -status => "$code", @headers );
    my $html = CGI::start_html( "$code $ctext" );
    $html .= CGI::h1( {}, "$ctext" );
    $html .= CGI::p( {}, $text );
    $html .= CGI::end_html();
    $res->print($html);
    return $res;
}

sub respond {
    my $req = shift;

    my $res = Foswiki::Response->new;

    # Matches Configure::Dispatch

    my $sid = $req->cookie(COOKIENAME) || undef;
    if ( defined $sid && $sid =~ m/^([\w_-]+)$/ ) {
        $sid = $1;
    }
    else {
        return text($req, $res, "Not authorized by configure");
    }
    my $session =
      CGI::Session->load( SESSION_DSN, $sid,
        { Directory => File::Spec->tmpdir } )
      or die CGI::Session->errstr();

    unless( $req->auth_type
        || ( !$session->is_expired && !$session->is_new
             && ($session->param("_RES_OK") || $session->param("_PASSWD_OK")) ) ) {
        return text($req, $res, 403, "Forbidden", "Expired or no session");
    }

    # Respond with embedded image

    my $pinfo = $req->pathInfo;
    unless( $pinfo && $pinfo =~ m,^/Web/Topic/(Img|Env)/(\w+), ) {
        return text( $req, $res, 403, "Forbidden", "Incorrect path info " . ($pinfo || "none") );
    }

    if( $1 eq "Env" ) {
        return text( $req, $res, 200, "OK", "$ENV{SCRIPT_NAME}|$ENV{SCRIPT_URI}|$2\n" );
    }
' . "
   \$res->header( -type => '$type', -status => '200', \@headers );
   \$res->print(decode_base64( '
" . encode_base64($data) . "' ));
    return \$res;
}
1;
\#>>>
";
print "__END__
";
local $/;
print <DATA>;
exit;

1;

__END__

Foswiki - The Free and Open Source Wiki, http://foswiki.org/

Copyright (C) 2012 Foswiki Contributors. Foswiki Contributors
are listed in the AUTHORS file in the root of this distribution.
NOTE: Please extend that file, not this notice.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version. For
more details read LICENSE in the root of this distribution.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

As per the GPL, removal of this notice is prohibited.
