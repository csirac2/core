%META:TOPICINFO{author="ProjectContributor" comment="save topic" date="1266224965" format="1.1" reprev="1.1" version="1.1"}%
%META:TOPICPARENT{name="Macros"}%
#VarADDTOZONE
---+++ ADDTOZONE

<verbatim class="tml">
%ADDTOZONE{
  "zone"
  ...
}%
</verbatim>

_Zones_ are specific places in the output HTML that are marked by calls to the [[VarRENDERZONE][RENDERZONE]] macro. Zones are used to collect various content together, such as Javascript and CSS, that must be included in the output HTML in a specific order, and in a specific place.

You may create as many zones in addition to the standard [[#HeadAndBody][ =head= and =body= ]] zones as you like. Interesting use cases in wiki applications:
   * Create a =sidebar= zone to add widgets,
   * Create a =toolbar= zone to add buttons icons

[[%TOPIC%][ADDTOZONE]] adds content identified with the =id= parameter to =zone=, which will later be expanded with [[VarRENDERZONE][RENDERZONE]]. =id= identifiers are unique within the zone that they are added to. An [[%TOPIC%][ADDTOZONE]] call may ensure that its content appears _after_ the text of some other [[%TOPIC%][ADDTOZONE]] calls by specifying their =ids= in the =requires= parameter. =requires= may only list =ids= within the =zone= being added to, except for the special case of =head= and =body= zones when ={OptimizePageLayout}= is not set (the default - [[#HeadAndBody][read more]]).

*Parameters:*
   * ="zone"= optional, comma-separated list of the names of zones that the content should be added to. Defaults to =head=.
   * =id= optional, =identifier= for the text being added with the =ADDTOZONE= call, to be used in the =requires= parameter of other =ADDTOZONE= calls.
      * %H% Multiple =ADDTOZONE= calls with the same =id= parameter will simply overwrite the earlier =ADDTOZONE= call.
   * =requires="..."= optional, comma separated string of =ids= of text within this =zone= that should be expanded before this call.
      * %H% Foswiki only resolves ordering dependencies within a zone.
   * =text="..."= optional, text to be added to the named zone, mutually exclusive with =topic=.
   * =topic="..."= optional, full qualified =web.topic= name that contains the text to be added, mutually exclusive with =text=.
   * =section="..."= optional, section of the =topic= to be added,
     defaults to the default section between [[VarSTARTINCLUDE][STARTINCLUDE]] and [[VarSTOPINCLUDE][STOPINCLUDE]].<br/>
      * %H% Using =topic= and =section= is actually a short form of 
      <verbatim class="tml">
%ADDTOZONE{
   "myzone"
   text="$percentINCLUDE{\"topic\" section=\"section\" warn=\"off\"}$percent"
}%</verbatim>

#HeadAndBody
---++++ How to use the =head= and =body= zones

When an HTML page is loaded by a browser, most browsers automatically request
Javascript from a URL as soon as it is encountered in the page, and then wait
for a response from the server before continuing. When a page loads a lot of
Javascript (as is often the case when using UI libraries such
as jQuery) you can get a "blank screen" effect in the browser while this
URL is downloaded. To avoid this effect, you can usually move Javascript
loading to the end of the HTML page, so that the "visuals" of the page are
loaded first, giving the user something to admire while the Javascript loads.

Foswiki makes this move easy to manage by providing the =head= and =body=
zones. These are _automatic_ zones - they do not require a
corresponding =RENDERZONE=.

Notionally the =head= and =body= zones correspond to a point just before the HTML =&lt;/HEAD&gt;= tag and a point just before the =&lt;/BODY&gt;= tag respectively. Normally you should add CSS (and other HTML =&lt;HEAD&gt;= content, such as =&lt;META&gt;=) to the =head= zone, and Javascript to the =body= zone. There is a setting in =configure=, ={OptimizePageLayout}=, that controls what happens next.

First, dependencies between the individual =ADDTOZONE= statements are resolved *within each zone*. Then, if ={OptimizePageLayout}= is enabled, the =head= content is added to the =&lt;HEAD&gt;,= and the =body= content is added to the =&lt;BODY&gt;=. However, if ={OptimizePageLayout}= is disabled (the default), both the =head= and =body= zones will be added to the HTML =&lt;HEAD&gt;=.

For this reason, consideration needs to be given to the way =head= and =body= zones behave with your Foswiki configuration, as dictated by the ={OptimizePageLayout}= setting.

---+++++ Working with ={OptimizePageLayout}= disabled (default)
If your pages rely on Javascript running to "finish" the layout of the page,
then you may want to disable ={OptimizePageLayout}= to prevent flickering
during loading.

In this mode, both =head= and =body= zone content will be expanded in the
=&lt;HEAD&gt;=. Nothing will be inserted in the =&lt;BODY&gt;=.

In this mode, the =body= and =head= are separate zones
when adding to them, but merged as one when you call
[[VarRENDERZONE][RENDERZONE]]. This allows an ADDTOZONE to the
=head= to successfully require an =id= that has been added to the =body=.

Only add content to the =body= zone _that is also legal in the =&lt;HEAD&gt;=.

---+++++ Working with ={OptimizePageLayout}= enabled
If your pages exhibit the "blank screen" effect during load due to requests
for large Javascript files, you can enable ={OptimizePageLayout}=.

You must ensure that no =head= content (and no inline Javascript) depends on =body= content, or vice-versa. Any such dependency will be _ignored_. However, the HTML comment decoration which normally appears after each id's text in the rendered HTML will contain a small informative text to aid debugging<br/> *Example* <br/>
   <verbatim class="tml">%ADDTOZONE{
   "head"
   text="
   <script type='text/javascript'>
      alert('test');
   </script>"
   requires="some-id-that-exists-in-body"
   id="MY::TEST"
}%</verbatim><br/> *Result*
   <verbatim class="html">
<script type='text/javascript'>
   alert('test');
</script>
<!-- MY::TEST required id(s) that were missing from head zone: some-id-that-exists-in-body --></verbatim>
   By contrast, as explained earlier, when ={OptimizePageLayout}= is disabled (default), Foswiki is able resolve such dependencies successfully.

Note that if you *do* have an explicit call to =%<nop>RENDERZONE{"head"}%= in
your templates then the content expanded at that point will be the same content
as would be inserted before the =&lt;/HEAD&gt;=.

#ExampleAddingJS
---++++ Example: Adding Javascript to a page
   * Make sure that all inline Javascript code in the topic (if it is allowed)
     is added to the page using =%<nop>ADDTOZONE{"body"...requires="library-id"}%=
     with the appropriate library-id to guarantee a correct load order. For example, jQuery code should be added as follows:
     %JQREQUIRE{"chili"}%<verbatim class="js">
%JQREQUIRE{"shake"}%%ADDTOZONE{
   "body"
   id="MyApp::ShakePart"
   text="
   <script type='text/javascript'>
      jQuery('#something').shake(3, 10, 180);
   </script>"
   requires="JQUERYPLUGIN::SHAKE"
}%</verbatim> where "MyApp::ShakePart" is a unique =id= to identify the text added to body; and =JQUERYPLUGIN::SHAKE= signifies that the content added with that identifier should appear beforehand.

#ExampleAddingCSS
---++++ Example: Adding CSS to a page
<verbatim class="tml">
%ADDTOZONE{"head"
   id="MyCSS"
   text="
      <style type='text/css' media='all'>
         @import url('%PUBURLPATH%/%SYSTEMWEB%/MyCSS/foo.css');
      </style>"
}%
</verbatim>
See also [[VarRENDERZONE][RENDERZONE]],
[[http://foswiki.org/Development/UsingADDTOZONE][Using ADDTOZONE]]
