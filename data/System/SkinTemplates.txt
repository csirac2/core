%META:TOPICINFO{author="ProjectContributor" date="1231502400" format="1.1" version="$Rev$"}%
%META:TOPICPARENT{name="Skins"}%
%STARTINCLUDE%
---+ Skin Templates

_The framework used to render output_ 

%TOC%

%STARTSECTION{"PowerUserGuide"}%
---++ Overview

_Skin Templates_ are plain text with embedded _template directives and _macros__ that describe how to compose blocks of text together, to create something new.

#HtmlTemplates
Skin templates are used when composing the output from all actions, such as view, edit, and preview. 
This allows you to change the look and feel of all pages by editing just a few template files.

Skin templates are usually stored as text files with the extension =.tmpl=, though can also come from topic text in some limited circumstances. 
The templates are usually HTML with embedded _template directives_ and _macros_. Template directives are expanded when the template is loaded, and are used to define the general structure of the output. Macros are expanded when the page is rendered, and fill in page-specific information.

See [[Macros]] for more information on macros.

#TemplateMacros
---++ How Template Directives Work
Directives are of the form ==%<nop>TMPL:&lt;key&gt;%== and ==%<nop>TMPL:&lt;key&gt;{"attr"}%==.
   * ==%<nop>TMPL:INCLUDE{"file"}%==: Includes a template file. The file is found as described [[#FindingTemplates][below]].
   * ==%<nop>TMPL:DEF{"block"}%==: Define a block. *All* text between this and the next =%<nop>TMPL:END%= directive is removed and saved for later use with =%<nop>TMPL:P%=.
   * ==%<nop>TMPL:END%==: Ends a block definition.
   * ==%<nop>TMPL:PREV%==: returns the previous definition of the block being defined.
   * ==%<nop>TMPL:P{"var"}%==: Includes a previously defined block.
   * ==%<nop>{...}%==: is a comment. Whitespace either side of the comment
     (newlines, spaces, tabs etc) is treated as part of the comment, and
     removed when the comment is removed.
Two-pass processing lets you use a defined block before or after declaring it.
For example, you can create a skin that overloads only the =foswiki.tmpl= master template, like the =print= skin which uses =foswiki.print.tmpl= to redefine the header and footer.

%X% Most template directives work only for templates: they do not get processed in normal topic text. The one exception is =%TMPL:P=.

=%TMPL:P= also supports simple parameters. For example, given the definition
=%<nop>TMPL:DEF{"x"}% x%<nop>P%z%<nop>TMPL:END%= then =%<nop>TMPL:P{"x" P="y"}%= will expand to =xyz=.

%ICON{"info"}% *Note:* the simple parameter =P= passed through in the example
above is only available in the immediate definition being included: =x=. If =x=
used =%<nop>TMPL:P{}%= in _its_ definition, =%<nop>P%= would not be expanded in
any of those _nested_ includes unless =x= passed each one a =P= parameter
explicitly.

Any alphanumeric characters can be used in parameter names.
You are highly recommended to use parameter names that cannot be confused with the predefined [[macros]].

Note that three parameter names, =context=, =then= and =else= are *reserved*.
They are used to support a limited form of "if" condition that you can use to select which of two TMPL:DEFs to use, based on a _context identifier_:
<verbatim>
%TMPL:DEF{"link_inactive"}%<input type="button" disabled value="Link>%TMPL:END%
%TMPL:DEF{"link_active"}%<input type="button" onclick="link()" value="Link" />%TMPL:END%
%TMPL:P{context="inactive" then="inactive_link" else="active_link"}% for %CONTEXT%
</verbatim>
When the "inactive" context is set, then this will expand the "link_inactive" TMPL:DEF; otherwise it will expand the "link_active" TMPL:DEF.
See IfStatements for details of supported context identifiers.

Comments =%{...}%= are removed from the templates as soon as the file is
read, before any other template macros are evaluated. Whitespace either side
of the comment (newlines, spaces, tabs etc) is also removed.

#FindingTemplates
---++ Finding Skin Templates

The skin templates shipped with a release are stored in the =templates= directory.
For example, ==templates/view.tmpl== is the default skin template file for the ==bin/view== script. 

You can save templates in other directories as long as they are listed in the ={TemplatePath}= configuration setting.
The ={TemplatePath}= is defined in the Miscellaneous section of the [[%SCRIPTURLPATH{configure}%][configure]] page.

You can also save skin templates in user topics.
The ={TemplatePath}= configuration setting defines which topics will be accepted as templates.

Skin templates that are included with an explicit ='.tmpl'= extension are looked for only in the =templates/= directory.
For instance =%TMPL:INCLUDE{"example.tmpl"}%= will only return =templates/example.tmpl=, regardless of ={TemplatePath}= and SKIN settings.

The rules defined by the out-of-the-box setting of ={TemplatePath}= are:
   1 =templates/$web/$name.$skin.tmpl=
   2 =templates/$name.$skin.tmpl=
   3 =$web.$skinSkin$nameTemplate=
   4 =System.$skinSkin$nameTemplate=
   5 =templates/$web/$name.tmpl=
   6 =templates/$name.tmpl=
   7 =$web.$nameTemplate=
   8 =System.$nameTemplate=
</verbatim>
This defines the the search order to find a template file. For example, let's say we are viewing a topic in web =Sandbox= and are searching for the template called =function=. The skin path is set to =custom,pattern=. The following locations will be considered in turn, until a template is found:
   1 =templates/Sandbox/function.custom.tmpl= _(rule 1)_ :skull:
   1 =templates/Sandbox/function.pattern.tmpl= _(rule 1)_ :skull:
   2 =templates/function.custom.tmpl= _(rule 2)_
   2 =templates/function.pattern.tmpl= _(rule 2)_
   3 =Sandbox.CustomSkinFunctionTemplate= _(rule 3)_
   3 =Sandbox.PatternSkinFunctionTemplate= _(rule 3)_
   4 =System.CustomSkinFunctionTemplate= _(rule 4)_
   4 =System.PatternSkinFunctionTemplate= _(rule 4)_
   5 =templates/Sandbox/function.tmpl= _(rule 5)_ :skull:
   6 =templates/function.tmpl= _(rule 6)_
   7 =Sandbox.FunctionTemplate= _(rule 7)_
   8 =System.FunctionTemplate= _(rule 8)_
:skull: this usage is supported *for compatibility only* and is *deprecated*.
Store web-specific templates in topics instead.

When a skin name or template name is used to build a topic name, the first character is automatically capitalised.

The _skin path_ is set as described in [[Skins]].

For example, the =example= template file will be searched for in the following places, when the current web is =Thisweb= and the skin path is =print,pattern=:

   I. =templates/Thisweb/example.print.tmpl= _deprecated; don't rely on it_
   I. =templates/Thisweb/example.pattern.tmpl= _deprecated; don't rely on it_
   I. =templates/example.print.tmpl=
   I. =templates/example.pattern.tmpl=
   I. =templates/Thisweb/example.tmpl= _deprecated; don't rely on it_
   I. =templates/example.tmpl=
   I. =Thisweb.PrintSkinExampleTemplate=
   I. =Thisweb.PatternSkinExampleTemplate=
   I. =Thisweb.ExampleTemplate=
   I. =%SYSTEMWEB%.PrintSkinExampleTemplate=
   I. =%SYSTEMWEB%.PatternSkinExampleTemplate=
   I. =%SYSTEMWEB%.ExampleTemplate=

#TemplatePreferences
Template file names are usually derived from the name of the currently executing script; however it is also possible to override these settings in the =view= and =edit= scripts, for example when a topic-specific template is required. Two [[%SYSTEMWEB%.PreferenceSettings][preference settings]] can be used to override the skin templates used:
   * =VIEW_TEMPLATE= sets the template to be used for viewing a topic.
   * =EDIT_TEMPLATE= sets the template for editing a topic.
If these preferences are set locally (using _Local_ instead of _Set_) for a topic, in WebPreferences, in [[%LOCALSITEPREFS%]], or [[%SYSTEMWEB%.DefaultPreferences]] (using _Set_), the indicated templates will be chosen for =view= and =edit= respectively. The template search order is as specified above.

---++ =%TMPL:INCLUDE= recursion
You can use recursion with %TMPL:INCLUDE for piecewise customisation, or mixing in new features.

If there is a recursion in the %TMPL:INCLUDE chain (eg. view.tmpl contains =%<nop>TMPL:INCLUDE{"view"}%=), the templating system will detect that you are trying to include the same template again, and will instead include the _next_ version of the template of that name that it finds in the template path. 

For example, say you _only_ want to override the breadcrumbs for the view script. You could create a tempate called =view.crumbless.tmpl=:
<verbatim>
%TMPL:INCLUDE{"view"}%
%TMPL:DEF{"breadcrumb"}% We don't want any crumbs %TMPL:END%
</verbatim>
and then =* Set SKIN=crumbless,pattern=
%X% The default ={TemplatePath}= will *not* give you the desired result if you simple put these statements in =Thisweb.CrumblessSkinViewTemplate=. The default ={TemplatePath}= will find the =template/view.pattern.tmpl=, before it gets to the =Thisweb.CrumblessSkinViewTemplate=. You can make it work by prefixing the ={TemplatePath}= with: =$web.CrumblessSkin$nameTemplate=. 

---++ Default master template

==foswiki.tmpl== is the default master template. It defines the following sections.

| *Template directive:* | *Defines:* |
| =%<nop>TMPL:DEF{"sep"}%= | "&#124;" separator |
| =%<nop>TMPL:DEF{"htmldoctype"}%= | Start of all HTML pages |
| =%<nop>TMPL:DEF{"standardheader"}%= | Standard header (ex: view, index, search)  |
| =%<nop>TMPL:DEF{"simpleheader"}%= | Simple header with reduced links (ex: edit, attach, oops) |
| =%<nop>TMPL:DEF{"standardfooter"}%= | Footer, excluding revision and copyright parts |

---++ Debugging templates

When writing new templates, it can sometimes it can be very hard to work out
where different parts of the generated output come from. To help you debug
your new templates, the =Foswiki::Templates= module has a "trace" mode. In
this mode, the output is annotated with HTML comments that are wrapped
around the output generated by each template, as it is expanded. For example,
when trace mode is off,
<verbatim>
%TMPL:DEF{"x:y"}% de %TMPL:END%
blah %TMPL:P{"x:y"}% blah
</verbatim>
will expand to:
<verbatim>
blah  de  blah
</verbatim>
With tracing enabled, it will expand to:
<verbatim>
blah <!--x:y--> de <!--/x:y--> blah
</verbatim>
To enable the trace mode, edit =lib/Foswiki/Templates.pm= in your
installation and change =use constant TRACE => 0= to
=use constant TRACE => 1=.

Note that the trace annotations may make your output look strange. However
you can usually "view source" in the browser to see what was generated (or
you may be able to run the script from the command-line e.g. =cd bin; perl -T -I . view topic=MyWeb.MyTopic skin=mynewskin=).

%I% Don't forget to switch the trace mode off again when you are finished!

%ENDSECTION{"PowerUserGuide"}%

---
*Related Topics:* [[Skins]] [[Macros]] [[JavascriptFiles]]

%STOPINCLUDE%
