%META:TOPICINFO{author="ProjectContributor" date="1231502400" format="1.1" version="$Rev$"}%
%META:TOPICPARENT{name="Macros"}%
%STARTINCLUDE%
---+ Formatted Search

_Inline search feature allows flexible formatting of search result_

The default output format of a =[[VarSEARCH][%<nop>SEARCH{...}%]]= is a table consisting of topic names and topic summaries. Use the =format="..."= parameter to customize the search result. The format parameter typically defines a bullet or a table row containing macros, such as =%<nop>SEARCH{ "food" format="| $topic | $summary |" }%=. See =[[VarSEARCH][%<nop>SEARCH{...}%]]= for other search parameters, such as =separator=""=.

%TOC%

---++ Syntax

Three parameters can be used to specify a customized search result:

---+++ 1. =header="..."= parameter

Use the header parameter to specify the header of a search result. It should correspond to the format of the format parameter. This parameter is optional. <br /> Example: =header="| <nop>*Topic:*<nop> | <nop>*Summary:*<nop> |"=

Format tokens that can be used in the header string:

| *Name:* | *Expands To:* |
| =$web= | Name of the web |
| =$ntopics= | Number of topics found in current web. Will be 0 (zero). |
| =$nhits= | Number of hits if =multiple="on"=. Will be 0 (zero). |
| =$pager= | pager control - can be optionally customised using the =pagerformat= below |
%INCLUDE{FormatTokens}%

   * %X% Note that if the separator parameter for SEARCH is not defined a newline is added after the header.

---+++ 2. =footer="..."= parameter

Use the footer parameter to specify the footer of a search result. It should correspond to the format of the format parameter. This parameter is optional. <br /> Example: =footer="| <nop>*Topic*<nop> | <nop>*Summary*<nop> |"=

Format tokens that can be used in the footer string:

| *Name:* | *Expands To:* |
| =$web= | Name of the web |
| =$ntopics= | Number of topics found in current web |
| =$nhits= | Number of hits if =multiple="on"=. Cumulative across all topics in current web. Identical to =$ntopics= unless =multiple="on"= |
| =$pager= | pager control - can be optionally customised using the =pagerformat= below |
%INCLUDE{FormatTokens}%

   * %X% Note that if the separator parameter for SEARCH is not defined a newline is added after the last search result.

---+++ 3. =pagerformat="..."= parameter

Use the pagerformat parameter to customise the appearance of the paging control. 
It should correspond to the format of the format parameter. 
This parameter is optional. <br /> Example: =pagerformat="Page $showpage of $numberofpages [[$nexturl][next page]]"=

Format tokens that can be used in the pagerformat string:

| *Name:* | *Expands To:* |
| =$previouspage= | The page number before the currently displayed one |
| =$currentpage= | The currently displayed page number |
| =$nextpage= | The page number after the currently displayed one  |
| =$numberofpages= | Total number of pages there are results for |
| =$pagesize= | The number of results per page |
| =$previousurl= | full URL to the previous page - _IF_ using the built in pager system |
| =$nexturl= | full URL to the previous page - _IF_ using the built in pager system |
| =$previousbutton= | skin template (SEARCH:pager_previous) html for the full URL to the previous page - _IF_ using the built in pager system |
| =$nextbutton= | skin template (SEARCH:pager_next) html for the full URL to the previous page - _IF_ using the built in pager system |
%INCLUDE{FormatTokens}%

---+++ 4. =format="..."= parameter

Use the format parameter to specify the format of one search hit.
<br /> Example: =format="| $topic | $summary |"=

Format tokens that can be used in the format string:

| *Name:* | *Expands To:* |
| =$web= | Name of the web |
| =$topic= | Topic name |
| =$topic(20)= | Topic name, "<tt>- </tt>" hyphenated each 20 characters |
| =$topic(30, -&lt;br /&gt;)= | Topic name, hyphenated each 30 characters with separator "<tt>-&lt;br /&gt;</tt>" |
| =$topic(40, ...)= | Topic name, shortended to 40 characters with "<tt>...</tt>" indication |
| =$parent= | Name of parent topic; empty if not set |
| =$parent(20)= | Name of parent topic, same hyphenation/shortening like =$topic()= |
| =$text= | Formatted topic text. In case of a =multiple="on"= search, it is the line found for each search hit. |
| =$locked= | LOCKED flag (if any) |
| =$date= | Time stamp of last topic update, e.g. =%GMTIME{"$day $mon $year - $hour:$min"}%= |
| =$isodate= | Time stamp of last topic update, e.g. =%GMTIME{"$year-$mo-$dayT$hour:$minZ"}%= |
| =$index= | number of total results - can be used as a running counter in the =format=, or in the =footer=. This $index is not affected by web based partitioning of results. |
| =$item= | the full name of a result item - in a SEARCH context, equivalent to =$web.$topic= |
| =$rev= | Number of last topic revision, e.g. =4= |
| =$username= | Login name of last topic update, e.g. =jsmith= |
| =$wikiname= | Wiki user name of last topic update, e.g. =<nop>JohnSmith= |
| =$wikiusername= | Wiki user name of last topic update, like =%USERSWEB%.<nop>JohnSmith= |
| =$createdate= | Time stamp of topic revision 1 |
| =$createusername= | Login name of topic revision 1, e.g. =jsmith= |
| =$createwikiname= | Wiki user name of topic revision 1, e.g. =<nop>JohnSmith= |
| =$createwikiusername= | Wiki user name of topic revision 1, e.g. =%USERSWEB%.<nop>JohnSmith= |
| =$summary= | Topic summary, just the plain text, all formatting and line breaks removed; up to 162 characters |
| =$summary(50)= | Topic summary, up to 50 characters shown |
| =$summary(showvarnames)= | Topic summary, with =%<nop>SOMEMACRO{...}%= macros shown as =SOMEMACRO{...}= |
| =$summary(noheader)= | Topic summary, with leading =---+ headers= removed%BR% *Note:* The tokens can be combined, for example =$summary(100, showvarnames, noheader)= |
| =$summary(searchcontext)= | Creates a topic summary with the search terms highlighted |
| =$summary(searchcontext, 50)= | Creates a topic summary with the search terms highlighted, up to 50 characters |
| =$changes= | Summary of changes between latest rev and previous rev |
| =$changes(n)= | Summary of changes between latest rev and rev n |
| =$formname= | The name of the form attached to the topic; empty if none |
| =$formfield(name)= | The field value of a form field; for example, =$formfield(<nop>TopicClassification)= would get expanded to =PublicFAQ=. This applies only to topics that have a [[DataForms][DataForm]]. For multi-line textfields new lines are replace by an HTML &lt;br /&gt; |
| =$formfield(name, 10)= | Form field value, "<tt>- </tt>" hyphenated each 10 characters |
| =$formfield(name, 20, -&lt;br /&gt;)= | Form field value, hyphenated each 20 characters with separator "<tt>-&lt;br /&gt;</tt>" |
| =$formfield(name, 30, ...)= | Form field value, shortended to 30 characters with "<tt>...</tt>" indication |
| =$pattern(reg-exp)= | A regular expression pattern to extract some text from a topic (does not search meta data; use =$formfield= instead). In case of a =multiple="on"= search, the pattern is applied to the line found in each search hit.%BB% Specify a RegularExpression that covers the whole text (topic or line), which typically starts with =.*=, and must end in =.*= %BB% Put text you want to keep in parenthesis, like =$pattern(.*?(from here.*?to here).*)= %BB% Example: =$pattern(.*?\*.*?Email\:\s*([^\n\r]+).*)= extracts the e-mail address from a bullet of format =* Email: ...= %BB% This example has non-greedy =.*?= patterns to scan for the first occurance of the Email bullet; use greedy =.*= patterns to scan for the last occurance %BB% Limitation: Do not use =.*)= inside the pattern, e.g. =$pattern(.*foo(.*)bar.*)= does not work, but =$pattern(.*foo(.*?)bar.*)= does %BB% Note: Make sure that the integrity of a web page is not compromised; for example, if you include an HTML table make sure to include everything including the table end tag |
| =$count(reg-exp)= | Count of number of times a regular expression pattern appears in the text of a topic (does not search meta data). Follows guidelines for use and limitations outlined above under =$pattern(reg-exp)=. Example: =$count(.*?(---[+][+][+][+]) .*)= counts the number of &lt;H4&gt; headers in a page. |
| =$ntopics= | Number of topics found in current web. This is the current topic count, not the total number of topics |
| =$nhits= | Number of hits if =multiple="on"=. Cumulative across all topics in current web. Identical to =$ntopics= unless =multiple="on"= |
| =$pager= | pager control - can be optionally customised using the =pagerformat= below |
%INCLUDE{FormatTokens}%

---++ Examples

Here are some samples of formatted searches. The SearchPatternCookbook has other examples, such as [[SearchPatternCookbook#SearchUsernames][creating a picklist of usernames]], [[SearchPatternCookbook#SearchTopicChildren][searching for topic children]] and more.

#SearchBulletList
---+++ Bullet list showing topic name and summary

*Write this:*

<verbatim class="tml">%SEARCH{
   "VarREMOTE"
   scope="topic"
   nosearch="on"
   nototal="on"
   header="| *Topic* | *Summary* |"
   format="| [[$topic]] | $summary |"
   footer="| *Topics found* | *$ntopics* |"
}%</verbatim>

*To get this:*

%SEARCH{
   "VarREMOTE"
   scope="topic"
   nosearch="on"
   nototal="on"
   header="| *Topic* | *Summary* |"
   format="| [[$topic]] | $summary |"
   footer="| *Topics found* | *$ntopics* |"
}%

---+++ Table showing form field values of topics with a form

In a web where there is a form that contains a =Topic<nop>Classification= field, an =Operating<nop>System= field and an =Os<nop>Version= field we could write:

<verbatim class="tml">
| *Topic:* | *!OperatingSystem:* | *!OsVersion:* |
%SEARCH{
   "[T]opicClassification.*?value=\"[P]ublicFAQ\""
   scope="text"
   type="regex"
   nosearch="on"
   nototal="on"
   format="| [[$topic]] | $formfield(OperatingSystem) | $formfield(OsVersion) |"
}%</verbatim>

To get this (simulated):

<table border="1" rules="none" class="foswikiTable" >
<thead>
  <tr class="foswikiTableOdd foswikiTableRowdataBgSorted0 foswikiTableRowdataBg0">
    <th> <strong>Topic:</strong> </th>
    <th> <strong>OperatingSystem:</strong> </th>
    <th> <strong>OsVersion:</strong> </th></tr>
</thead>
<tbody>
  <tr class="foswikiTableOdd foswikiTableRowdataBgSorted1 foswikiTableRowdataBg1">
    <td>  <a href="%SCRIPTURLPATH{"view"}%/Sandbox/IncorrectDllVersionW32PTH10DLL">IncorrectDllVersionW32PTH10DLL</a>  </td>
    <td>  <a href="%SCRIPTURLPATH{"view"}%/Sandbox/OsWin">OsWin</a>  </td>
    <td>  95/98  </td>
  </tr>
  <tr class="foswikiTableOdd foswikiTableRowdataBgSorted0 foswikiTableRowdataBg0">
     <td>  <a href="%SCRIPTURLPATH{"view"}%/Sandbox/WinDoze95Crash">WinDoze95Crash</a>  </td>
     <td>  <a href="%SCRIPTURLPATH{"view"}%/Sandbox/OsWin">OsWin</a>  </td>
     <td>  95  </td>
  </tr>
</tbody>
</table>


---+++ Extract some text from a topic using regular expression

*Write this:*

<verbatim class="tml">
%SEARCH{
   "\*Back to:\* FrequentlyAskedQuestions"
   scope="text"
   type="regex"
   nosearch="on"
   nototal="on"
   header="FAQs:"
   format="   * $pattern(.*?FAQ\:[\n\r]*([^\n\r]+).*) [[$topic][Answer...]]"
   footer="Found $ntopics FAQ topics"
}%</verbatim>

*To get this:*

%SEARCH{
   "\*Back to:\* FrequentlyAskedQuestions"
   scope="text"
   type="regex"
   nosearch="on"
   nototal="on"
   header="FAQs:"
   format="   * $pattern(.*?FAQ\:[\n\r]*([^\n\r]+).*) [[$topic][Answer...]]"
   footer="Found $ntopics FAQ topics"
}%

---+++ Nested Search

Search, as with almost any TML expression, may be nested. For example, search for some topics, then form a new search for each topic found in the first search. The idea is to build the nested search string using a formatted search in the first search.

The key to understanding nested expressions in Foswiki is to understand that macros are expanded "inside-out, left-to-right". For example:
<verbatim class="tml">
%MACRO1{
   something="%MACRO2{
      somethingelse="%MACRO3%, %MACRO4%"
   }%"
}%
</verbatim>

The macros are expanded in this order: MACRO3, MACRO4, MACRO2, MACRO1.

Consider the following example. Let's search for all topics that contain the word "culture" (first search), and let's find out where each topic found is linked from (second search).

*First search:*
   <verbatim class="tml">
%SEARCH{
   "culture"
   nosearch="on"
   nototal="on"
   format="   * $topic is referenced by: (list all references)"
}%</verbatim>

*Second search:*

For each hit, we want this search:
   <verbatim class="tml">
%SEARCH{
   "(topic found in first search)"
   nosearch="on"
   nototal="on"
   format="$topic"
   separator=", "
}%</verbatim>

Now let's nest the two.
---++++ Method 1 (traditional)
The second search cannot be placed directly into the format string of the first, because of the "inside-out, left-to-right" macro expansion behaviour discussed earlier. It must be delayed so that the outer search is evaluated first. To do this, we need to escape the second search, i.e. let the first search build a series of searches using the second search.
   * Use =$percent= to escape (delay) the second search's [[VarSEARCH][SEARCH]] macro
   * Use =\"= to escape the double quotes
   * Use =$dollar= to escape the =$= of =$topic=

*Write this:*
<verbatim class="tml">
%SEARCH{
   "culture"
   nosearch="on"
   nototal="on"
   format="\
   * $topic is referenced by:
      * $percentSEARCH{
         \"$topic\"
         nosearch=\"on\"
         nototal=\"on\"
         format=\"$dollartopic\"
         separator=\", \"
      }$percent"
}%
</verbatim>

*To get this:*
%SEARCH{
   "culture"
   nosearch="on"
   nototal="on"
   format="\
   * $topic is referenced by:
      * $percentSEARCH{
         \"$topic\"
         nosearch=\"on\"
         nototal=\"on\"
         format=\"$dollartopic\"
         separator=\", \"
      }$percent"
}%

---++++ Method 2 (recommended)
Nested expressions can be difficult to write correctly, and are difficult to troubleshoot when they go wrong.

The recommended approach is to make use of the [[VarSTARTSECTION][STARTSECTION]]/[[VarENDSECTION][ENDSECTION]] feature of the [[VarINCLUDE][INCLUDE]] macro. Instead of nesting the second search expression directly inside the format string of the first, the second search is written as a separate stand-alone section of a topic which is INCLUDEd into the format string of the first.

*Write this:*
<verbatim class="tml">
%SEARCH{
   "culture"
   nosearch="on"
   nototal="on"
   format="\
   * $topic is referenced by:
      * $percentINCLUDE{\"%TOPIC%\" section=\"mysearch\" thetopic=\"$topic\"}$percent"
}%

<!-- HTML comment to hide this section from the user
%STARTSECTION{"mysearch"}%%SEARCH{
   "%thetopic%"
   nosearch="on"
   nototal="on"
   format="$topic"
   separator=", "
}%%ENDSECTION{"mysearch"}%
-->
</verbatim>

%ICON{"info"}% Output will be the same as for the first method

<blockquote>%ICON{"warning"}% Nested search can be slow, especially if you nest more then 3 times. Nesting is limited to 16 levels.

When using the traditional method for nesting macros, each new nesting level must "escape the escapes", e.g. write =$dollarpercentSEARCH{= for level three, =$dollardollarpercentSEARCH{= for level four, etc. Therefore it is strongly advised to use the sectional include method instead, which avoids this kind of difficult and error-prone syntax.</blockquote>

---+++ Most recently changed pages

*Write this:*
<verbatim class="tml">
%SEARCH{
   "1"
   type="query"
   nosearch="on"
   nototal="on"
   order="modified"
   reverse="on"
   limit="7"
   format="| [[$topic]] | $wikiusername  | $date |"
}%</verbatim>

*To get this:*
%SEARCH{
   "1"
   type="query"
   nosearch="on"
   nototal="on"
   order="modified"
   reverse="on"
   limit="7"
   format="| [[$topic]] | $wikiusername  | $date |"
}%

---+++ Search with conditional output

Sometimes it may be desirable for each hit to be displayed differently depending on some criteria. For example, maybe you want to list 20 topics modified in 2009, but decorate the hits which are children of UserDocumentationCategory with an %ICON{"info"}% icon.
   1. Specify a search which returns the hits you need
   1. For each search hit, test the condition that will influence the output using a nested [[VarIF][IF]] [[IfStatements][statement]]

*Write this:*
<verbatim class="tml">
%SEARCH{
   "info.date >= d2n('2009-01-01') AND info.date <= d2n('2009-12-31')"
   type="query"
   limit="20"
   format="   * $percentICON{
      \"$percentIF{
         \"'$topic'/parent.name='UserDocumentationCategory'\"
         then=\"info\"
         else=\"gear\"
      }$percent\"
   }$percent [[$topic]]"
}%</verbatim>
<blockquote>
%ICON{"info"}% *Details:*
   * The SEARCH has a deferred [[VarICON][ICON]]. The =$percent= ensures that ICON is evaluated once for each search hit
   * The [[VarICON][ICON]] contains an [[VarIF][IF]], which again is deferred with the =$percent= token and will also be evaluated for each SEARCH hit. Additionally, the "inside-out, left-to-right" rule discussed earlier means that this IF expression will be evaluated before [[VarICON][ICON]].
   * If =$topic= is a child of UserDocumentationCategory, the =info= icon is used; otherwise, =gear=.
</blockquote>
*To get this:*
%SEARCH{
   "info.date >= d2n('2009-01-01') AND info.date <= d2n('2009-12-31')"
   type="query"
   limit="20"
   format="   * $percentICON{
      \"$percentIF{
         \"'$topic'/parent.name='UserDocumentationCategory'\"
         then=\"info\"
         else=\"gear\"
      }$percent\"
   }$percent [[$topic]]"
}%

---+++ Embedding search forms to return a formatted result

Use an HTML form and an embedded formatted search on the same topic. You can link them together with an [[VarURLPARAM][URLPARAM]] macro. Example:

*Write this:*
%JQREQUIRE{"chili"}%<verbatim class="tml">
<form action="%SCRIPTURLPATH{"view"}%/%WEB%/%TOPIC%">
Find Topics: 
<input type="text" name="q" size="32"\
  value="%URLPARAM{"q" encode="entity"}%" />&nbsp;<input\
  type="submit" class="foswikiSubmit" value="Search" />
</form>
Result:
%SEARCH{
   "%URLPARAM{"q" encode="quote"}%"
   type="keyword"
   nosearch="on"
   format="   * $web.$topic: %BR% $summary"
}%
</verbatim>

#FormSearchExample
*To get this:*
<form action="%SCRIPTURLPATH{"view"}%/%WEB%/%TOPIC%#FormSearchExample">
Find Topics: 
<input type="text" name="q" size="32"\
  value="%URLPARAM{"q" encode="entity"}%" />&nbsp;<input\
  type="submit" class="foswikiSubmit" value="Search" />
</form>
Result:
%SEARCH{
   "%URLPARAM{"q" encode="quote"}%"
   type="keyword"
   nosearch="on"
   format="   * $web.$topic: %BR% $summary"
}%

---
*Related Topics:* UserDocumentationCategory, SearchHelp, [[%SYSTEMWEB%.Macros#VarSEARCH][Macros#VarSEARCH]], SearchPatternCookbook, RegularExpression
